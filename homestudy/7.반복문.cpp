반복실행을 명령하는 반복문

@while문에 의한 문장의 반복

@반복문이란 ?
반복실행의 명령을 내릴 때 사용하는 문법이다.
while문, do~while문, for문 총 세 가지가 있다.

@while문
반복을 명령하는 문장이다.
특정조건을 주고 그 조건을 만족하는 동안, 특정영역을 계속해서 반복하는 구조이다.

반복의 조건이 무너지지 않으면 반복이 멈추지 않는 '무한루프'라는 현상이 만들어진다.
따라서 반복문의 구성에서 중요한 것 중 하나는 '반복의 조건을 무너뜨리기 위한 최소한의 연산'이다.

ex)
int num = 0;

while (num<3)
{
	printf("Hello World! %d \n", num);
	num++;
}
-------------------------------------- -
Hello World!0
Hello World!1
Hello World!2

@반복문 안에서도 들여쓰기한다.
어디까지가 main 함수이고, while 문 안에 종속된 반복의 대상이 되는 코드가 무엇인지 쉽게 눈에 들어오지 않기에,
들여쓰기가 필요하다.

@반복의 대상이 하나의 문장이라면 중괄호는 생략 가능하다.
while (num<5)
	printf("Hello World! %d \n", num++);

@while문의 구성과 실행흐름의 세세한 관찰
ex)
int num = 0;
while (num<3)  // 3회 반복  
{
	printf("Hellow World! %d \n", num);
	num++;
}
== == == == == == == == == == == == =
위 예시의 실행과정
1. "int num =0"     0으로 초기화
2. "while(num<3) " 비교연산, 실행여부 결정 n = 0
3. "printf("Hellow World!%d \n", num);           
num++; " //n 값은 1     //1차 실행 n=1                      while문 내 문장 실행 후, 반복여부 재확인을 위해 이동
4."while(num<3) " 비교연산, 실행여부 결정
5. while문 내 문장 실행(2차) 후, 반복여부 재확인을 위해 이동  n = 2
6."while(num<3) " 비교연산, 실행여부 결정
7. while문 내 문장 실행(3차) 후, 반복여부 재확인을 위해 이동   n = 3
8."while(num<3) " 비교연산, 실행여부 결정(n = 3 < 3) xx
	9. 조건 성립하지 않으므로, 반복 영역 실행하지 않고 탈출

	위와 같은 형태를 그림으로 표현한 것을 '순서도(flow chart)'라고 한다.

	@무한루프의 구성
	반복조건이 와야 할 위치에 0이 아닌 값('참'을 의미하느 값)이 올 경우,
	무한루프라  불리우는 빠져나가지 않는 반복문이 형성된다.

	@while문의 중첩
	while문 안에 while문이 포함된 상황을 뜻한다.

	@do~while 문에 의한 문장의 반복
	@do~while문의 기본구성
	반복영역을 최소한 한번은 실행하는 구조이다.

	ex)
	do
	{
		printf("Hello World ! \n");
		num++;
	} while (num<3);

	#while문과의 차이점
		반복조건의 검사위치가 다르며,
		이로 인해서 반복영역을 최소한 1회 이상 실행한다는 점이 다르다.

		@do~while문이 자연스러운 상황
		ex)
		while (num<10)
		{
			printf(%d*%d = %d \n", dan, num, dan*num);
				num++;
		}

	do
	{
		printf("%d*%d=%d \n", dan, num, dan*num);
		num++
	} while (num<10);

		+일반적으론 while문을 사용하지만, 반복영역이 무조건 한 번 이상 실행되어야 할때는 do while 을 사용한다.

			@for문에 의한 문장의 반복
			@for문반복을 구성하기 위해 필요한 모든 것을 한데 묶을 수 있도록 만들어진 반복문이다.

			실행 횟수가 정해져 있을 때 주로 사용
			변수명은 보통 i, j, k 사용
			반복 횟수를 제어하는 변수가 필요

			@for문의 구조와 이해
			for (초기식*; 조건식*; 증감식*)
			{
				// 반복의 대상이 되는 문장들
			}

		필수요소1  *초기식   반복을 위한 변수의 선언 및 초기화에 사용
			필수요소2  *조건식   반복의 조건을 검사하는 목적으로 선언됨
			필수요소3  *증감식   반복을 위한 '거짓'으로 만드는 증가 및 감소연산

			int main(void)*
		{
			int num;
			for (int num = 0; (1번) num<3(2번); num++(4번))
				printf("Hi"); (3번)  // 반복의 대상이 한 줄 이므로 중괄호 생략!
		}

		일부 C 컴파일러는 for문의 '초기식'위치에서의 변수선언을 허용하고 있지 않다.
			따라서 int num변수 선언은 for문 위에 위치해야 한다.

			초기식    본격적으로 반복을 시작하기에 앞서 딱 한번 실행된다.
			조건식    매 반복의 시작에 앞서 실행되며, 그 결과를 기반으로 반복유무를 결정!
			증감식    매 반복실행 후 마지막에 연산이 이뤄진다.

			*
			첫 번째 반복의 흐름
			1 -> 2-> 3-> 4  num = 1

			두 번째 반복의 흐름
			2 -> 3-> 4   num = 2

			세 번째 반복의 흐름
			2 -> 3-> 4  num = 3

			네 번째 반복의 흐름
			2  num = 3   탈출!

			int num = 0에 해당하는 초기화는 반복문의 시작에 앞서 딱 1회 진행된다.
			num < 3에 해당하는  조건의 검사는 매 반복문의 시작에 앞서 진행된다.
			num++ 에 해당하는 증감연산은 반복영역을 실행한 후에 진행된다.

			따라서, for문의 실행방식은 구조적으로 while문의 실행방식과 동일하다.

			Q) for과 while은 언제 써요 ?
				for문은 반복의 횟수가 딱 정해진 경우에 사용한다.
			while문은 반복의 횟수가 정해져 있지 않을 때 사용한다.

			@for문 기반의 다양한 예제
			for (int i = 0; i < num + 1; i++)
				total += i;

		+for문은 기본적으로 초기식, 조건식, 증감식을 채울 수 있지만, 필요없는 부분은 채우지 않아도 된다.
			+ for문의 중간에 위치한 '조건식'이 비어지면 무조건 '참'으로 인식이 되어 무한루프를 형성하게 된다.

			@for문의 중첩
			while문과 do~while문과 마찬가지로 for문도 중첩이 가능하다.
