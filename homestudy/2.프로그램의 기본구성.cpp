함수
일정한 기능을 수행하는 코드 단위

Ex)
8x(입력) + 10 = y(출력)

여기서 '*인자'는 x(입력)에 전달되는 값이다.

C프로그램은 함수로 시작해서 함수로 끝난다.
정해진 순서에 의해서 진행되는 함수의 호출이 바로 프로그램의 흐름이 된다.

Q) C프로그램이 실행하면 어떤 일이 벌어질까 ?
제일 먼저 'main'이라는 함수를 호출한다.

@함수의 시작형태
출력형태*  함수이름  입력형태
Int*           main*         (void*)

'출력형태'는 '반환형(return type)'이라는 표현으로 자주 불린다.
Int - 정수형   ex)0, 1, 2…
Main - 그냥 함수이름인데, 제일 먼저 호출되기에 main이라고 이름을 붙인 듯하다.
Void - '공허한' 이라는 뜻 ex)출력형태가 void라면 ? 출력값이 없다, 입력형태가 void라면 ? 입력값이 없다.


함수의 정의 - 만들어진 함수, 실행이 가능한 함수
함수 호출 - 함수의 실행을 명령하는 행위
인자의 전달 - 함수의 실행을 명령할 때 전달하는 입력값

함수의 머리(head)
int(반환형)(return type) main (void)
{
	함수의 몸체(body);
	return 0;
}
중괄호 안에 존재하는 문장은 순차적으로 실행된다.
함수의 기능을 정의하고 있는 영역(중괄호 안쪽)을 '함수의 몸체(body)'라 부른다.

*' ; '의 의미란 ?
함수 내의 존재하는 문장의 끝에는 세미콜론 문자 ' ; '를 붙여준다.
그렇지만 예외도 있다.ex)조건문, 반복문 등등

*' "" ' 의 의미란 ?
문자열을 표현한다.

*printf(출력 함수) 란 ?
print formmatted 프린트에프
함수의 일종으로, 함수호출 시 전달되는 문자열을 모니터에 출력하는 기능을 가진다.

Q) Printf 함수를 만든 적이 없는데 호출 할 수 있는 이유는 ?
누구나 가져다 쓸 수 있도록 기본적으로 제공되는 함수이기 때문

표준 함수 - 기본적으로 제공되는 함수 ex)printf
표준 라이브러리 - 표준 함수들을 모아놓은 것

헤더파일 선언  ex) < stdio.h >
표준 함수의 호출을 위해 필요함.

return의 2가지 의미
1.함수를 호출한 영역으로 값을 반환(전달)
2.현재 실행중인 함수 종료

왜 0을 전달 ?
+위 상황에서는 return 0; 으로 인해 main 함수에서 빠져나오는 것인데,
Main 함수의 종료는 프로그램의 종료로 이어지기 때문에 결국 프로그램이 종료된다.

*Stdio란 ?
헤더파일의 종류 중 하나로,
printf함수의 호출에 필요한 정보를 담고 있다.

*' .h ' 란 ?
확장자가.h로 끝나는 헤더파일을 포함하라는 의미의 선언이다.

@Main 함수의 return 문
Main 함수의 마지막의 반환되는 값(0)은 main 함수를 호출한 영역으로 전달된다.
그렇지만 main함수는 프로그램 시작과 동시에 호출됨으로, 호출의 주체는 운영체제이다.
따라서 0 은 운영체제에게 전달되며, 그 값은 프로그램의 종료상태를 알리는데 사용된다.

쉬운 설명
정상적인 종료의 상황 - >Main 함수의 반환 값이 0
비정상적인 종료의 상황->Main 함수의 반환 값이 0이 아닌 값

주석
프로그램 안에서 사용하는 메모로, 컴파일의 대상은 아니다.
프로그램 작성자들의 편의를 위해 만들어졌다.

Q) 주석이 필요한 이유는 ?
코드 줄이 많아질 수록 헷갈림으로 필요하다.
프로그램을 분석하는 이들을 배려하는 수단과 동시에 스스로를 배려하는 수단도 된다.


블록 단위 주석
/*
블록 단위 주석
*/
행 단위 주석
// 행 단위 주석
+ 주의점
블록단위 주석안에 주석을 넣고 싶을 땐, 행단위 주석만 사용해야 한다.
블록단위 주석은 " /* " 뒤에 " */ "를 인식하는데 블록단위 주석을 그 안에 달게 되면,
의도와 다르게 보여질 수 있다.

Ex) 나쁜 예
/*
주석처리 된 문장1
/* 단일 행 주석 처리*/   <-여기 뒤에 붙은 " */ "에서 주석의 끝으로 해석된다.
	주석처리 된 문장2
	* /

	Ex)올바른 예
	/*
	주석처리 된 문장1
	//단일 행 주석처리
	주석처리 된 문장2
	*/

printf 함수(출력 함수)
printf("Hello, World\n");
printf("%d", 5);

@printf 함수의 기본적인 이해
Printf 함수는 문자열 뿐아니라, 정수 데이터도 출력이 가능하다.

Q) 숫자는 그냥 적어도 출력이 될까 ?
아니다, 숫자를 출력하기 위해서는 서식문자*가 필요하다.


서식 문자(conversion specifier)
출력의 형태를 지정하는 용도로 사용된다.
("%d\n*)  123          완성된 함수의 호출문
	Printf(인자1, 인자2)->printf"("%d\n, 123");
	Printf("%d\n", 123);  -> "123\n"

	Ex) " %d *"   <-서식문자의 종류 중 하나

	*%d란 ?
	'10진수 정수형태의 출력' 을 의미한다.

	*\n 이란 ?
	이스케이프 시퀀스* 중 하나로,
	개행*을 의미한다.

	*이스케이프 시퀀스(escape sequence)(제어 문자)란 ?
	큰따옴표로 표현되는 문자열 안에 특수한 의미의 문자를 삽입할 수 있다.

	*개행이란 ?
	Enter키와 같은 역할(다음 칸으로 이동)을 한다.


	-------------------------------------------------------------------------- -
	지금까지 배운 내용으로 간단한 문장 출력하기}
#include <stdio.h> // 헤더파일 불러오기

	Int main(void) // 메인함수
	{
		Printf("%d은 내가 방금 임의로 정한 숫자입니다.\n", 97);
		Printf("저는 지금 김밥천국에 가서 김밥을 %d줄 먹을 예정입니다.\n", 2);
		Printf("%d", 3467); //정수와 실수 출력
		Return 0; /* return 값 반환하기)*/
	}
	%d = decimal
	%lf = long float
		%.1lf 설명
