배열의 이름의 의미
배열의 이름은 포인터다.
그 값을 바꿀 수 없는 '상수 형태의 포인터'이다.
'포인터 상수' 라고도 부른다.
ex)arr = &arr[i];  xx

배열명 역할을 하는 포인터
int ary[3];
int* pa = ary; 포인터에 배열명 저장
sizeof(ary) -> 12
sizeof(pa)  -> 4
포인터 == 변수
pa = pa + 1
pa++->가능
배열명 == 상수
ary = ary + 1
ary++->불가능

++(*pa)->값 자체가 증가 됨
(*pa)++->출력 후 증가, 제대로 수행됨

배열의 이름도 포인터이기 때문에 배열의 이름을 피연산자로 하는 *연산이 가능하다.

1차원 배열이름의 포인터 형은 배열의 이름이 가르키는 대상을 기준으로 결정하면 된다.

포인터 변수를 배열의 이름처럼 사용할 수도 있고,
배열의 이름을 포인터 변수처럼 사용하는 것도 가능하다.
하지만, 이처럼 사용하는 경우는 거의 없다.

@1차원 배열 포인터 연산
ex)
int arr1[3] = { 1,2,3 };
double arr2[3] = { 1.1,2.2,3.3 };

printf("%d %g \n", *arr1, *arr2);    1  1.1
*arr1 += 100;
*arr2 += 120.5;
printf("%d %g \n", arr1[0], arr2[0];) 101  121.6
return 0;

포인터를 배열의 이름처럼 사용할 수도 있다.

== == == == == == == == == == == == == == == == == == == == == == ==
@포인터 연산
포인터 증감연산
int* ptr = arr == int*ptr = &arr[0];
ex)
int* ptr1 = 적절히 초기화 ;
int* ptr2 = 적절히 초기화 ;
ptr++;
ptr1 += 3;
ptr2 = +5;
ptr2 = ptr1 + 2;

int형    포인터를 대상으로 1을 증가시키면 4
double형 포인터를 대상으로 1을 증가시키면 8

따라서, *(ptr + 1) == ++ptr

*(++ptr) = 20;    -> *ptr = 21
*(ptr + 1) = 20;  ptr + 1의 위치에 20을 대입  

둘은 다르다.

arr[i] == *(arr + i)
이게 중요하다.

포인터 뺄셈
포인터 - 포인터->값의 차 / 가르키는 자료형의 크기
배열 요소간의 간격 차이를 의미한다.

배열을 처리하는 함수에 필요한 것은 배열의 주소다.
정수 연산		  pa + 1      (배열의 두 번째 요소의 주소)
간접 참조 연산   *(pa + 1)   (두 번째 배열 요소)
배열 요소 표현식  pa[1](두 번째 배열 요소)

배열 요소의 개수를 알아야 배열의 크기가 달라도 입출력 가능

== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =
@상수 형태의 문자열 포인터
char str1[] = "My String"; 배열의 길이는 자동으로 계산, 문자열 전체를 저장하는 배열, 변수 형태의 문자열
char str2[] = "Your String"  메모리상에 자동으로 저장된 "your string"의 첫 번째 문자를 단순히 가리키고만 있는 포인터 변수

배열이름 str1은 계속해서 문자 M이 저장된 위치를 가르키는 상태여야 하지만,
포인터변수 str2는 다른 위치를 가르킬 수 있다.
ex)
char* str = "Your team"; 상수 형태의 문자열
str = "Our team";   str이 가르키는 대상을 문자열 "Our team"으로 변경, 변수 형태의 문자열
== == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
@포인터 변수로 이뤄진 배열
포인터 변수로 이뤄진, 그래서 주소 값의 저장이 가능한 배열을 포인터 배열이라 한다.
int* arr1[20]; 길이가 20인 int형 포인터 배열 arr1
double* arr2[30]; 길이가 30인 double형 포인터 배열 arr2


문자열을 저장하는 포인터 배열
char* strArr[3];   길이가 3인 char형 포인터 배열
ex) char* strArr[3] = :"simple", "string", "array"};
printf("%s" strArr[0])   -> simple
큰 따옴표로 묶어서 표현되는 문자열은 그 형태와상관없이 메모리 공간에 저장된 후 그 주소 값이 반환된다.

