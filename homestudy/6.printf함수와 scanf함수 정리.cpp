printf 함수
문자열을 출력하는 함수

@특수문자(이스케이프 시퀀스)의 출력이 필요한 이유
다음과 같은 여러 문제들을 해결하기 위함이다.

ex)
printf("우리집 앵무새가 말했어요 "시부엉, 씨부엉." 뭘 들은거야?"  // "우리집 앵무새가 말했어요" " 뭘 들은거야?" 만 출력된다.
	printf("우리집 앵무새가 말했어요 \"시부엉, 씨부엉.\" 뭘 들은거야?" // 올바른 출력

		+ 특수문자 탄생배경
		"큰 따옴표는 문자열의 시작과 끝으로 해석이 되니, 큰 따옴표 자체의 출력을 원하는 경우에는 큰 따옴표 앞에 \문자를 붙여주기로 하자."

		@특수문자의 종류
		\a 	경고음
		\b	백스페이스
		\f	폼 피드(form feed)
		\n	개 행(new line)
		\r	캐리지 리턴(carriage return)
		\t	수평 탭
		\b	수직 탭
		\'	작은 따옴표 출력
		\"	큰 따옴표 출력
		\ ? 물음표 출력
		\\	역슬래쉬 출력

		@printf 함수의 서식지정
		printf의 f는 formatted(서식이 지정된)을 의미한다.
		따라서 printf라는 함수의 이름에는 '서식*이 지정된 형태의 출력*'이라는 뜻이 담겨있다.

		*서식
		서류를 작성하는 양식

		*서식이 지정된 형태의 출력
		출력양식이 만들어진 상태에서 출력을 진행한다.

		ex)
	"제 나이는 10진수로 12살, 16진수로 C살 입니다."
	"제 나이는 10진수로 %d살, 16진수로 %X살 입니다."

	%d = 데이터를 10진수 정수의 형태로 출력한다는 의미
	%X = 데이터를 16진수로 출력하되, 알파벳은 대문자로 출력한다는 의미
	%x = 데이터를 16진수로 출력하되, 알파벳은 소문자로 출력한다는 의미

	printf 함수를 이용해서 서식화 된 출력을 할 수 있는 이유는,
	문자열 안에 서식문자를 포함할 수 있기 때문이다.

	ex)
	int myAge = 12;
printf("제 나이는 10진수로 %d살, 16진수로 %X살 입니다." \n, myAge, myAge);
return 0;

제 나이는 10진수로 12살, 16진수로 C살 입니다.

첫 번째, 서식문자는 두 번째 인자, 두 번째 서식문자는 세 번째 인자를 통해 전달된다.

@서식문자의 종류와 그 의미

printf 함수의 서식문자
서식문자 	출력 대상(자료형)	출력 형태
%d	        char, short, int	부호 있는 10진수 정수
%ld			long	            부호 있는 10진수 정수
%lld		long long			부호 있는 10진수 정수
%u			unsigned int		부호 있는 10진수 정수
%o			unsigned int		부호 있는 8진수 정수
%x, %X		unsigned int		부호 있는 816진수 정수
%f			float, double		10진수 방식의 부동소수점 실수
%Lf			long double			10진수 방식의 부동소수점 실수
%e, %E		float, double		e 또는 E 방식의 부동소수점 실수
%g, %G		float, double		값에 따라 %f 와 %e 사이에서 선택
%c			char, short, int	값에 대응하는 문자
%s			char*	            문자열
%p			void*	            포인터의 수고 값

@정수의 출력을 위한 서식문자들 : %d, %u, %o, %x
양의 정수 출력 : %o(8진수로 출력), %x(16진수로 출력)
음의 정수 출력 : %d(10진수로 출력)

8진수를 8진수 답게(7 = 07), 16진수를 16진수 답게(13 = 0xd)
int num1 = 13;
printf("%x %#*x \n", num1, num1);
return 0;

d   0xd

8, 16진수로 출력할 경우 출력된 내용을 8, 16진수 정보임을 알리기 위해서 서식문자에 #을 포함시켜서 출력하는 것이 좋다.

@실수의 출력을 위한 서식문자들 : %f, %e, %g
printf("%f \n", 0.1234);
printf("%e \n", 0.1234);            // e 표기법 기반의 출력
printf("%f \n", 0.12345678);
printf("%e \n", 0.12345678);     // *e 표기법 기반의 출력
------------------------------------------ -
0.123400
1.234000e-001
0.123457
1.234568e-001

0.00000000000000000001
위를 지수형태로 표현하면 1.0x(10의 - 20승)이다.
프로그램상에서는 지수를 표현 할 수 없기에 'e 표기법'이 존재한다.

*e표기법
1.0e-20 = 0  1.0x(10의 - 20승)

+ %g는 소수점 이하의 자릿수가 늘어나면 e 표기법으로 출력한다.

@%s를 이용한 문자열의 출력
%s의 s는 string의 약자이로 문자열의 출력을 지시하기 위한 서식문자에 사용된다.

ex)
prinf("%s, %s, %s \n", "AAA", "BBB", "CCC");
------ -
AAA, BBB, CCC

필드 폭 지정하는 출력
%8d   8칸 확보 한 후, 오른쪽 정렬 출력
%-8d  8칸 확보 한 후, 왼쪽 정렬 출력
============================================================
@scanf 함수 이야기
scan formmatted 스켄에프
//컴파일러 에러 시, #define _CRT_SECURE_NO_WARNINGS

@정수 기반의 입력형태 정의하기
scanf의 호출을 위해서 두 가지 정보가 전달되어야 한다.
입력의 형식    ex) 어디로 받아들일 거니 ?
입력의 장소    ex) 어디에 저장할까 ?

#scanf 함수의 서식문자(정수)
% d      10진수 정수의 형태로 데이터를 입력 받는다.
%o       8진수 정수의 형태로 데이터를 입력 받는다.
%x      16진수 정수의 형태로 데이터를 입력 받는다.

@실수 기반의 입력형태 정의하기
%f    float형 데이터를 입력 받는다.
%e    float형 데이터를 입력 받는다.
%g     float형 데이터를 입력 받는다.
%lf     double형 데이터를 입력 받는다.
%Lf  long double형 데이터를 입력받는다.

실수의 입력과정에서 e 표기법을 사용해도 된다.

float, double, long double의 데이터 출력에 사용되는 서식문자는 각각 %f, %f, %Lf이다.
float, double, long double의 데이터 입력에 사용되는 서식문자는 각각 %f, %lf, %Lf이다.

서식문자 %s는 문자열 입력에 사용된다.

변환 문자와 맞는 형태의 데이터를 입력해야 한다.