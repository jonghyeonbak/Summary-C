데이터 표현 방식의 이해
@컴퓨터가 데이터를 표현하는 방식
컴퓨터는 2진수*를 기반으로 데이터를 표현하고 연산도 진행한다.

*진수란 ?
기호를 이용해 데이터를 표현하는 방식이다.

컴퓨터는 2진수를 기반으로 데이터를 표현하고 연산한다.
컴퓨터는 수를 0부터 센다.

2진수
두 개의 기호를 이용해 데이터를 표현하는 방식
ex)0 1
ex)2진수로 13을 표현하면 ? 1101
0 1 10 11 100 101 111 1000

8진수
ex) 8진수로 9는 ? 11
0 1 2 3 4 5 6 7 10 11 12

10진수
ex)0 1 2 3 4 5 6 7 8 9 10 11

16진수
ex)10부터 15는 ? A, B, C, D, E, F
0 1 2 3 4 ... 9 A B C D E F 10 11

16진수까지 있는 이유 ?
데이터를 표현하기 쉽다.

===============================================
데이터의 표현단위 비트(bit), 바이트(byte)
비트
컴퓨터가 표현하는 데이터의 최소단위
2진수 값 하나를 저장할 수 있는 메모리의 크기를 뜻하는 단위

바이트
비트 8개가 모여있는 단위

1바이트 = 8비트

===================================================
@8진수와 16진수를 이용한 데이터 표현
int num1 = 10;   // 특별한 선언이 없을 땐 10진수의 표현
int num2 = 0xA; // 0x로 시작하면 16진수로 인식
int num3 = 012; // 0으로 시작하면 8진수로 인식

+표현방식이 다르다고 해서 저장되는 값이 다른 것은 아니다.
+ 컴퓨터는 내부적으로 2진수의 형태로 값을 저장한다.

========================================
정수와 실수의 표현 방식

#정수의 표현방식(4bite)

0(비트부호 + -) * 0000000 00000000 00000000 00000001

* 비트부호(MSB, Most Singificant Bit)
정수의 가장 왼쪽에 존재하는 비트를 말한다.
정수값이 양수라면 0, 음수라면 1을 저장하여 부호를 표시한다.

지수부 비트 부호 다음부터 11비트까지 지수 값을 의미
소수부 나머지 52비트는 소수값을 의미

#정수의 음수 표현방식
음의 정수를 표현할 땐 '2의 보수*'를 취해줘야 한다.

1의 보수
비트를 모두 전환한다.
ex)00000001  -> 11111110

2의 보수
1의 보수에 1을 더해준다.
ex)00000101 -> 11111010 -> 11111011

ex)
00000101   // 정수 +5
11111010 // 1의 보수*
11111011  // 2의 보수

+ 음의 정수 표현법의 증명방법
00000101  // +5
+ 11111011  // -5
---------------- -
1 00000000 // 올림수는 버려저서 0


@실수의 표현방식
#실수를 표현하는 올바른 방식
x-- - e---- - ----m-- -
10000001  00000101

x = 비트부호
±(1.m)x2[e - 127]

2[e - 127] = 2의 e - 127 승이다.

@컴퓨터가 실수를 표현하는 방식에는 오차*가 존재한다.
컴퓨터는 우리가 표현하고자 하는 실수의 값을 정확히 표현하는 게 아니라,
아주 가까운, 문제가 없을 만큼의 근사치를 통해서 실수를 표현한다.

이때 발생하는 *오차를 '부동소수점 오차'라고 한다.

소수점형태		지수 형태			c언어 표기법
0.0000314       -> 3.14  x 10-5		3.14e-5
				-> 0.314 x 10-4		0.314E-5
				-> 31.4  x 10-6		31.4e-6
	                          x10을 e로 표현, 지수는 그 옆에 숫자로 표기한다.
	c언어 표기법 중에 소수점 앞에 0이 아닌 유효 숫자를 사용해 지수형태로 바꾼 것을 정규화표기법(normalization)이라 한다.

진수 변환법 기억해두셈
